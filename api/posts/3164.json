{"title":"数据结构之栈 Stack 和队列 Queue","slug":"数据结构之栈Stack和队列Queue","date":"2020-04-23","updated":"2020-05-08","comments":true,"path":"api/posts/3164.json","excerpt":"<p> 栈（Stack）和队列（Queue），了解栈和队列的基础知识，学习它们的基础应用。</p>","cover":"/gallery/data-structure-stack.png","covers":["/gallery/data-structure-stack.png"],"content":"<p>栈（Stack）和队列（Queue），了解栈和队列的基础知识，学习它们的基础应用。</p><a id=\"more\"></a><h1 id=\"栈 Stack\"><a class=\"headerlink\" href=\"# 栈 Stack\"></a>栈 Stack</h1><p>栈 Stack 是一种线性结构，是线性表的一种具体形式。栈这种后进先出（Last In First Out，LIFO）的应用非常广泛，例如网页的前进后退功能，编辑器的后一步前一步功能，方法调用时的函数栈等等。</p><p>栈 Stack 的特性：</p><ul><li>栈的元素必须“后进先出”</li><li>栈的操作只能于线性表表尾进行 </li><li> 栈的表尾被称为栈顶（Top），栈的表头被称为栈底（bottom）</li></ul><p>栈 Stack 的操作：</p><ul><li>插入操作（Push），进栈 </li><li> 删除操作（Pop），出栈 </li></ul><p><img src=\"/gallery/data-structure-stack.png\" alt=\"Stack Pop And Push\"></p><h2 id=\"栈的顺序存储结构\"><a class=\"headerlink\" href=\"# 栈的顺序存储结构\"></a> 栈的顺序存储结构 </h2><p> 应用顺序存储结构的栈，元素必须从开始表尾进行操作，从而节省下元素前移补充位置的操作，而不像链式结构可以从表头操作。当栈初始化时，不含有任何数据的栈被称为空栈，此时栈顶就是栈底。</p><h2 id=\"栈的链式存储结构\"><a class=\"headerlink\" href=\"# 栈的链式存储结构\"></a>栈的链式存储结构 </h2><p><strong> 栈一般使用顺序存储结构 </strong> 实现。使用链式存储结构时，栈底为链表头部，栈顶为链表尾部。</p><h2 id=\"使用栈来进行进制转换\"><a class=\"headerlink\" href=\"# 使用栈来进行进制转换\"></a>使用栈来进行进制转换 </h2><p> 例子，使用顺序存储结构的栈计算把 <code>8</code> 位数的二进制数转换成十进制数。</p><figure class=\"highlight js\"><figcaption><span>Javascript</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stack = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]; <span class=\"comment\">// 11001001 (2)</span></span><br><span class=\"line\"><span class=\"comment\">// 1*2^0 + 0*2^1 + 0*2^2 + 1*2^3 + 0*2^4 + 0*2^5 + 1*2^6 + 1*2^7</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> power = <span class=\"number\">0</span>; <span class=\"comment\">// start with power of 0 in first digit</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">  result += stack.pop() * <span class=\"built_in\">Math</span>.pow(<span class=\"number\">2</span>, power++);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// result = 201 (10)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Faster way in JavaScript</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'11001001'</span>, <span class=\"number\">2</span>).toString(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure><p>例子，使用顺序存储结构的栈计算把 <code>8</code> 位数的二进制数转换成八进制数。</p><figure class=\"highlight js\"><figcaption><span>Javascript</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stack = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]; <span class=\"comment\">// 11001001 (2)</span></span><br><span class=\"line\"><span class=\"comment\">// 001=&gt;1, 001=&gt;1, 11=&gt;3, final 311 (8)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> temp = [];</span><br><span class=\"line\"><span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 3-digit pair</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> d0 = stack.pop() | <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d1 = (stack.pop() | <span class=\"number\">0</span>) * <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d2 = (stack.pop() | <span class=\"number\">0</span>) * <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> D = d0 + d1 + d2;</span><br><span class=\"line\">  temp.push(D);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = temp.reverse().join(<span class=\"string\">''</span>); <span class=\"comment\">// result = 311 (8)</span></span><br><span class=\"line\">temp = <span class=\"built_in\">parseInt</span>(result, <span class=\"number\">8</span>); <span class=\"comment\">// 201 (10)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Faster way in JavaScript</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'11001001'</span>, <span class=\"number\">2</span>).toString(<span class=\"number\">8</span>);</span><br></pre></td></tr></table></figure><p>例子，使用顺序存储结构的栈计算把 <code>8</code> 位数的二进制数转换成十六进制数。</p><figure class=\"highlight js\"><figcaption><span>Javascript</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> stack = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>]; <span class=\"comment\">// 11001001 (2)</span></span><br><span class=\"line\"><span class=\"comment\">// 1001=&gt;9, 1100=&gt;C, final C9 (16)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> letters = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>, <span class=\"string\">'d'</span>, <span class=\"string\">'e'</span>, <span class=\"string\">'f'</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> temp = [];</span><br><span class=\"line\"><span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 4-digit pair</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> d0 = stack.pop() | <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d1 = (stack.pop() | <span class=\"number\">0</span>) * <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d2 = (stack.pop() | <span class=\"number\">0</span>) * <span class=\"number\">4</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> d3 = (stack.pop() | <span class=\"number\">0</span>) * <span class=\"number\">8</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> D = d0 + d1 + d2 + d3;</span><br><span class=\"line\">  temp.push(D &gt; <span class=\"number\">9</span> ? letters[D % <span class=\"number\">10</span>] : D);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = temp.reverse().join(<span class=\"string\">''</span>); <span class=\"comment\">// result = C9 (16)</span></span><br><span class=\"line\">temp = <span class=\"built_in\">parseInt</span>(result, <span class=\"number\">16</span>); <span class=\"comment\">// 201 (10)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Faster way in JavaScript</span></span><br><span class=\"line\"><span class=\"built_in\">parseInt</span>(<span class=\"string\">'11001001'</span>, <span class=\"number\">2</span>).toString(<span class=\"number\">16</span>);</span><br></pre></td></tr></table></figure><h2 id=\"使用栈来计算普通数学表达式\"><a class=\"headerlink\" href=\"# 使用栈来计算普通数学表达式\"></a>使用栈来计算普通数学表达式 </h2><p> 计算 <code>1 + (2 - 3 * 4.5) / 6</code>;</p><p> 第一步，转换中缀表达式到后缀表达式（逆波兰表达式）。</p><figure class=\"highlight js\"><figcaption><span>JavaScript</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Expected Result: 1 2 3 4.5 * - 6 / +</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> input = <span class=\"string\">'1 + (2 - 3 * 4.5) / 6'</span>;</span><br><span class=\"line\">input = input.replace(<span class=\"regexp\">/\\s/g</span>, <span class=\"string\">''</span>); <span class=\"comment\">// 1+(2-3*4.5)/6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> numbers = input.split(<span class=\"regexp\">/[\\+\\-\\*\\/\\(\\)]+/</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"1\",\"2\",\"3\",\"4.5\",\"6\"]</span></span><br><span class=\"line\">numbers.forEach(<span class=\"function\">(<span class=\"params\">num, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  input = input.replace(num, i); <span class=\"comment\">// 0+(1-2*3)/4</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"string\">''</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; input.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = input.charAt(i);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"regexp\">/[\\+\\-\\*\\/\\(\\)]/</span>.test(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"string\">')'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">let</span> symbol = stack.pop();</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (symbol !== <span class=\"string\">'('</span>) &#123;</span><br><span class=\"line\">        result += <span class=\"string\">`<span class=\"subst\">$&#123;symbol&#125;</span> `</span>;</span><br><span class=\"line\">        symbol = stack.pop();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (stack.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> symbol = stack.pop();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"regexp\">/\\*\\//</span>.test(symbol) &amp;&amp; !<span class=\"regexp\">/\\*\\//</span>.test(value)) &#123;</span><br><span class=\"line\">          result += <span class=\"string\">`<span class=\"subst\">$&#123;symbol&#125;</span> `</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          stack.push(symbol);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      stack.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    result += <span class=\"string\">`<span class=\"subst\">$&#123;numbers[value]&#125;</span> `</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (stack.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  result += <span class=\"string\">`<span class=\"subst\">$&#123;stack.pop()&#125;</span> `</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result = \"1 2 3 4.5 * - 6 / +\"</span></span><br></pre></td></tr></table></figure><p>第二步，计算转换后的逆波兰表达式，最后输出结果。</p><figure class=\"highlight js\"><figcaption><span>JavaScript</span></figcaption><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Expected Result: -0.9166666666666667</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> input = <span class=\"string\">'1 2 3 4.5 * - 6 / +'</span>;</span><br><span class=\"line\">input = input.trim().split(<span class=\"regexp\">/\\s/</span>);</span><br><span class=\"line\"><span class=\"comment\">// [\"1\", \"2\", \"3\", \"4.5\", \"*\", \"-\", \"6\", \"/\", \"+\"]</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; input.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = input[i];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(value)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> backNum = stack.pop();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> frontNum = stack.pop();</span><br><span class=\"line\">    <span class=\"keyword\">let</span> subResult = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value === <span class=\"string\">'+'</span>) &#123;</span><br><span class=\"line\">      subResult = frontNum + backNum;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"string\">'-'</span>) &#123;</span><br><span class=\"line\">      subResult = frontNum - backNum;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"string\">'*'</span>) &#123;</span><br><span class=\"line\">      subResult = frontNum * backNum;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (value === <span class=\"string\">'/'</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (backNum === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Divisor cannot be 0'</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      subResult = frontNum / backNum;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Operator must be\"+\",\"-\",\"*\"or\"/\"'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      stack.push(subResult);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      result = subResult;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    stack.push(<span class=\"built_in\">parseFloat</span>(value));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// result = -0.9166666666666667</span></span><br></pre></td></tr></table></figure><h1 id=\" 队列 Queue\"><a class=\"headerlink\"href=\"# 队列 Queue\"></a>队列 Queue</h1><p>队列 Queue 是一种线性结构，也是线性表的一种具体形式。队列这种先进先出（First In First Out，FIFO）的应用也非常广泛，是只允许在一段进行插入操作，而在另一端进行删除操作的线性表，例如输入缓冲功能，任务顺序加载功能等等。</p><p>队列可以用顺序储存结构实现，但是跟栈相反，<strong>队列一般都用链式储存结构 </strong> 实现。</p><p>队列 Queue 的特性：</p><ul><li>队列的元素必须“后进先出”</li><li>队列的操作只能于线性表头尾进行 </li></ul><p> 队列 Queue 的操作：</p><ul><li>插入操作（Offer），进队列 </li><li> 删除操作（Poll），出队列 </li></ul><p><img src=\"/gallery/data-structure-queue.png\"alt=\"Queue Offer And Poll\"></p><blockquote><p> 本文参考：<br><a href=\"https://www.bilibili.com/video/BV1jW411K7yg\"target=\"_blank\"rel=\"noopener external nofollow noreferrer\">【C 语言描述】《数据结构和算法》（小甲鱼）</a></p></blockquote>","url":"/posts/3164/","min2read":5,"word4post":"1.2k","prev_post":null,"next_post":{"title":"数据结构之线性表 List","url":"/posts/6004/"},"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\"栈 Stack\" href = \"#\"><span class=\"toc-number\">1.</span> <span class=\"toc-text\">栈 Stack</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"栈的顺序存储结构\" href = \"#\"><span class=\"toc-number\">1.1.</span> <span class=\"toc-text\"> 栈的顺序存储结构 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"栈的链式存储结构\" href = \"#\"><span class=\"toc-number\">1.2.</span> <span class=\"toc-text\">栈的链式存储结构 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"使用栈来进行进制转换\" href = \"#\"><span class=\"toc-number\">1.3.</span> <span class=\"toc-text\">使用栈来进行进制转换 </span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" data-id=\"使用栈来计算普通数学表达式\" href = \"#\"><span class=\"toc-number\">1.4.</span> <span class=\"toc-text\">使用栈来计算普通数学表达式 </span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" data-id=\" 队列 Queue\" href = \"#\"><span class=\"toc-number\">2.</span> <span class=\"toc-text\">队列 Queue</span></a></li></ol>","categories":[{"name":"数据结构与算法","path":"api/categories/数据结构与算法.json","url":"/categories/数据结构与算法/"}],"tags":[{"name":"Stack","path":"api/tags/Stack.json","url":"/tags/Stack/"},{"name":"Queue","path":"api/tags/Queue.json","url":"/tags/Queue/"}]}